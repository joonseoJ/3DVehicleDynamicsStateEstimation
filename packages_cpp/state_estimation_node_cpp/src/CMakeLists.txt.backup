cmake_minimum_required(VERSION 3.0.2)

find_package(catkin REQUIRED COMPONENTS roscpp)
find_package(ros_debug_helpers_cpp REQUIRED)
find_package(tum_types_cpp REQUIRED)
find_package(tum_helpers_cpp REQUIRED)
find_package(tf2 REQUIRED)
find_package(tf2_ros REQUIRED)
find_package(tf2_geometry_msgs REQUIRED)
find_package(msgs REQUIRED)
find_package(nav_msgs REQUIRED)
find_package(geometry_msgs REQUIRED)
find_package(state_estimation_cpp REQUIRED)
find_package(state_estimation_base REQUIRED)
find_package(state_estimation_constants REQUIRED)
find_package(sensor_msgs REQUIRED)
find_package(diagnostic_msgs REQUIRED)
find_package(tum_type_conversions_ros_cpp REQUIRED)
find_package(ros1_watchdog_cpp REQUIRED)

catkin_package(
  INCLUDE_DIRS ../include
  LIBRARIES ${PROJECT_NAME}
  CATKIN_DEPENDS
    roscpp
    ros_debug_helpers_cpp
    tum_types_cpp
    tum_helpers_cpp
    tf2
    tf2_ros
    tf2_geometry_msgs
    msgs
    nav_msgs
    geometry_msgs
    state_estimation_cpp
    state_estimation_base
    state_estimation_constants
    sensor_msgs
    diagnostic_msgs
    tum_type_conversions_ros_cpp
    ros1_watchdog_cpp
)

include_directories(
  ../include
  ${catkin_INCLUDE_DIRS}
)

set(NODE_EXECUTABLE_NAMES 
  state_estimation_node_cpp_ekf_2d_kin
  state_estimation_node_cpp_ekf_3d_kin
  state_estimation_node_cpp_ekf_2d_nh
  state_estimation_node_cpp_ekf_3d_nh
  state_estimation_node_cpp_ekf_3d_stm
)

set(NODE_EXECUTABLE_PATHS 
  cpp/kinematic/state_estimation_node_cpp_ekf_2d_main.cpp
  cpp/kinematic/state_estimation_node_cpp_ekf_3d_main.cpp
  cpp/non_holonomic/state_estimation_node_cpp_ekf_2d_main.cpp
  cpp/non_holonomic/state_estimation_node_cpp_ekf_3d_main.cpp
  cpp/single_track_model/state_estimation_node_cpp_ekf_3d_main.cpp
)


list(LENGTH EXECUTABLE_NAMES COUNT)
math(EXPR COUNT "${COUNT} - 1")

# section: BUILD EXECUTABLE
# ====================================================================
# foreach(NODE_EXECUTABLE_NAME NODE_EXECUTABLE_PATH IN ZIP_LISTS NODE_EXECUTABLE_NAMES NODE_EXECUTABLE_PATHS)
#   add_executable(${NODE_EXECUTABLE_NAME} ${NODE_EXECUTABLE_PATH})
  
#   add_dependencies(${NODE_EXECUTABLE_NAME} 
#     ${${PROJECT_NAME}_EXPORTED_TARGETS} 
#     ${catkin_EXPORTED_TARGETS}
#   )

#   target_link_libraries(${NODE_EXECUTABLE_NAME}
#     ${catkin_LIBRARIES}
#   )

#   target_compile_options(${NODE_EXECUTABLE_NAME} PUBLIC -Ofast)

#   install(TARGETS ${NODE_EXECUTABLE_NAME}
#     RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
#   )
# endforeach()

foreach(IDX RANGE ${COUNT})
  list(GET NODE_EXECUTABLE_NAMES ${IDX} NODE_EXECUTABLE_NAME)
  list(GET NODE_EXECUTABLE_PATHS ${IDX} NODE_EXECUTABLE_PATH)
  
  add_executable(${NODE_EXECUTABLE_NAME} ${NODE_EXECUTABLE_PATH})
  
  add_dependencies(${NODE_EXECUTABLE_NAME}
    ${${PROJECT_NAME}_EXPORTED_TARGETS} 
    ${catkin_EXPORTED_TARGETS}
  )

  target_link_libraries(${NODE_EXECUTABLE_NAME}
    ${catkin_LIBRARIES}
  )

  target_compile_options(${NODE_EXECUTABLE_NAME} PUBLIC -Ofast)

  install(TARGETS ${NODE_EXECUTABLE_NAME}
    RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
  )
endforeach()

install(
  DIRECTORY ../include/
  DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
)
# section: GENERAL
# ====================================================================
